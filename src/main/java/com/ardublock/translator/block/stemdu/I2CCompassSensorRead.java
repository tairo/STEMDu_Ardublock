package com.ardublock.translator.block.stemdu;

import com.ardublock.translator.Translator;
import com.ardublock.translator.block.TranslatorBlock;
import com.ardublock.translator.block.exception.SocketNullException;
import com.ardublock.translator.block.exception.SubroutineNotDeclaredException;

public class I2CCompassSensorRead extends TranslatorBlock{
	public I2CCompassSensorRead(Long blockId, Translator translator) {
		super(blockId, translator);
		// TODO Auto-generated constructor stub
	}

	public I2CCompassSensorRead(Long blockId, Translator translator,
			String codePrefix, String codeSuffix) {
		super(blockId, translator, codePrefix, codeSuffix);
		// TODO Auto-generated constructor stub
	}

	public I2CCompassSensorRead(Long blockId, Translator translator,
			String codePrefix, String codeSuffix, String label) {
		super(blockId, translator, codePrefix, codeSuffix, label);
		// TODO Auto-generated constructor stub
	}

	private final static String i2ccompassFunction = "float ardublockI2CCompassSensorReadCodeAutoGeneratedReturnCM(int mode, int flag){\n  MagnetometerScaled scaled = HMC5883L_compass.ReadScaledAxis();\n  float heading = atan2(scaled.YAxis, scaled.XAxis);\n  if(flag == 1){\n  	heading = heading - HMC5883L_headingOrigin;\n  }\n  if(heading < 0) heading += 2*PI;\n  if(heading > 2*PI) heading -= 2*PI;\n  if(mode == 0){\n	  return heading*180/M_PI;\n  }\n  else{\n	  return heading;\n  }\n}\n\n";
	private final static String i2ccompassFunction2 = "void ardublockI2CCompassSensorResetCodeAutoGeneratedReturnCM(){\n  MagnetometerScaled scaled = HMC5883L_compass.ReadScaledAxis();\n  HMC5883L_headingOrigin = atan2(scaled.YAxis, scaled.XAxis);\n}\n";
	@Override
	public String toCode() throws SocketNullException,
			SubroutineNotDeclaredException {
		// TODO Auto-generated method stub
		TranslatorBlock translatorBlock = this.getRequiredTranslatorBlockAtSocket(0);
		String outputFormat = translatorBlock.toCode();
		translatorBlock = this.getRequiredTranslatorBlockAtSocket(1);
		String isReletive = translatorBlock.toCode();

		translator.addHeaderFile("Wire.h");
		translator.addHeaderFile("HMC5883L.h");

		String definitionCode = "HMC5883L HMC5883L_compass;\nint HMC5883L_error;\nfloat HMC5883L_headingOrigin;\n";
		translator.addDefinitionCommand(definitionCode);
		translator.addDefinitionCommand(i2ccompassFunction);
		translator.addDefinitionCommand(i2ccompassFunction2);

		translator.addSetupCommand("Wire.begin();\n");
		translator.addSetupCommand("HMC5883L_compass = HMC5883L();\n");
		translator.addSetupCommand("HMC5883L_error = HMC5883L_compass.SetScale(1.3);\n");
		translator.addSetupCommand("HMC5883L_error = HMC5883L_compass.SetMeasurementMode(Measurement_Continuous);\n");
		translator.addSetupCommand("ardublockI2CCompassSensorResetCodeAutoGeneratedReturnCM();\n");

		return codePrefix + "ardublockI2CCompassSensorReadCodeAutoGeneratedReturnCM(" + outputFormat + ", " + isReletive + ")" + codeSuffix;
	}

}
