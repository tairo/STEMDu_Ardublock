package com.ardublock.translator.block.stemdu;

import com.ardublock.translator.Translator;
import com.ardublock.translator.block.TranslatorBlock;
import com.ardublock.translator.block.exception.SocketNullException;
import com.ardublock.translator.block.exception.SubroutineNotDeclaredException;

public class MPU6050AccelerometerXAxisRead extends TranslatorBlock{
	public MPU6050AccelerometerXAxisRead(Long blockId, Translator translator) {
		super(blockId, translator);
		// TODO Auto-generated constructor stub
	}

	public MPU6050AccelerometerXAxisRead(Long blockId, Translator translator,
			String codePrefix, String codeSuffix) {
		super(blockId, translator, codePrefix, codeSuffix);
		// TODO Auto-generated constructor stub
	}

	public MPU6050AccelerometerXAxisRead(Long blockId, Translator translator,
			String codePrefix, String codeSuffix, String label) {
		super(blockId, translator, codePrefix, codeSuffix, label);
		// TODO Auto-generated constructor stub
	}

	private final static String mpu6050Function = "float ardublockI2CCompassSensorReadCodeAutoGeneratedReturnCM(int mode, int flag){\n  MagnetometerScaled scaled = HMC5883L_compass.ReadScaledAxis();\n  float heading = atan2(scaled.YAxis, scaled.XAxis);\n  if(flag == 1){\n  	heading = heading - HMC5883L_headingOrigin;\n  }\n  if(heading < 0) heading += 2*PI;\n  if(heading > 2*PI) heading -= 2*PI;\n  if(mode == 0){\n	  return heading*180/M_PI;\n  }\n  else{\n	  return heading;\n  }\n}\n\n";
	@Override
	public String toCode() throws SocketNullException,
			SubroutineNotDeclaredException {
		// TODO Auto-generated method stub
		TranslatorBlock translatorBlock = this.getRequiredTranslatorBlockAtSocket(0);
		String outputFormat = translatorBlock.toCode();
		translatorBlock = this.getRequiredTranslatorBlockAtSocket(1);
		String isReletive = translatorBlock.toCode();

		translator.addHeaderFile("Wire.h");
		translator.addHeaderFile("I2Cdev.h");
		translator.addHeaderFile("MPU6050.h");

		String definitionCode = "MPU6050 MPU6050_accelgyro;\nint16_t MPU6050_ax, MPU6050_ay, MPU6050_az;\nint16_t MPU6050_gx, MPU6050_gy, MPU6050_gz;\n";
		translator.addDefinitionCommand(definitionCode);

		translator.addSetupCommand("MPU6050_accelgyro.initialize();\n");
		//translator.addSetupCommand("boolean MPU6050_result = MPU6050_accelgyro.testConnection();\n");

		return codePrefix + "ardublockI2CCompassSensorReadCodeAutoGeneratedReturnCM(" + outputFormat + ", " + isReletive + ")" + codeSuffix;
	}

}
